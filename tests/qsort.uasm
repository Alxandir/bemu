.include beta.uasm

        .macro PROLOGUE() {PUSH(LP) PUSH(BP) MOVE(SP, BP)}
        .macro EPILOGUE() {MOVE(SP, BP) POP(BP) POP(LP) RTN()}
        arg0 = -0x0C
        arg1 = -0x10
        arg2 = -0x14
        arg3 = -0x18

        || qsort a large array for performance testing

. = 0
        BR(start)               | Reset
        HALT()                  | Illop
        HALT()                  | Clock

start:
        CMOVE(stack, SP)
        CALL(qsort)
        CALL(check)
        BF(R0, done)

        CMOVE(0x1111, R0)
done:
        HALT()

qsort:
        PROLOGUE()
        PUSH(R0)

        CMOVE(arrayend-4, R0)
        PUSH(R0)                |right
        CMOVE(array, R0)
        PUSH(R0)                | left
        CALL(qsort_helper)
        DEALLOCATE(2)

        POP(R0)
        EPILOGUE()

qsort_helper:
        PROLOGUE()
        PUSH(R0)
        PUSH(R1)
        PUSH(R2)
        PUSH(R3)
        PUSH(R4)

        || R0 is scratch (comparisons, etc)
        || R1 is left
        || R2 is right
        || R3 is pivot
        || R4 is scratch

        GETFRAME(arg0, R1)
        GETFRAME(arg1, R2)

        CMPLE(R2, R1, R0)      | if right >= left, stop
        BT(R0, qsort_done)

        || pivot = *left
        LD(R1, 0, R3)

        || Swap pivot (*left) and *right
        LD(R2, 0, R4)
        ST(R3, 0, R2)
        ST(R4, 0, R1)

qsort_loop:

        || while ((*left) < pivot && left < right) left++
left_loop:
        LD(R1, 0, R0)
        CMPLT(R0, R3, R0)
        BF(R0, left_loop_done)
        CMPLT(R1, R2, R0)
        BF(R0, left_loop_done)
        ADDC(R1, 4, R1)
        BR(left_loop)
left_loop_done:

        || while ((*right) >= pivot && left < right) right--;
right_loop:
        LD(R2, 0, R0)
        CMPLT(R0, R3, R0)
        BT(R0, right_loop_done)
        CMPLT(R1, R2, R0)
        BF(R0, right_loop_done)
        SUBC(R2, 4, R2)
        BR(right_loop)
right_loop_done:

        || Swap *left and *right
        LD(R1, 0, R0)
        LD(R2, 0, R4)
        ST(R0, 0, R2)
        ST(R4, 0, R1)

        CMPEQ(R1, R2, R0)
        BF(R0, qsort_loop)

        || Done
        || Load the original right into R2
        GETFRAME(arg1, R2)
        || Swap *left and *right
        LD(R1, 0, R0)
        LD(R2, 0, R4)
        ST(R0, 0, R2)
        ST(R4, 0, R1)

        || Recurse
        || First, (l, left)
        GETFRAME(arg0, R0)
        PUSH(R1)
        PUSH(R0)
        CALL(qsort_helper)
        DEALLOCATE(2)
        || (l+1, right)
        ADDC(R1, 4, R1)
        PUSH(R2)
        PUSH(R1)
        CALL(qsort_helper)
        DEALLOCATE(2)

qsort_done:
        POP(R4)
        POP(R3)
        POP(R2)
        POP(R1)
        POP(R0)
        EPILOGUE()

check:
        PROLOGUE()
        PUSH(R1)
        PUSH(R2)
        PUSH(R3)

        CMOVE(array, R1)
        LD(R1, 0, R2)

check_loop:
        ADDC(R1, 4, R1)
        CMPEQC(R1, arrayend, R0)
        BT(R0, check_pass)
        LD(R1, 0, R3)
        CMPLT(R2, R3, R0)
        BF(R0, check_fail)
        MOVE(R3, R2)
        BR(check_loop)

check_pass:
        CMOVE(1, R0)
        BR(check_done)
check_fail:
        CMOVE(0, R0)
check_done:
        POP(R3)
        POP(R2)
        POP(R1)
        EPILOGUE()

        ||  Data
stack:
        STORAGE(1024)

array:
        .include qsort-data.uasm
arrayend:

  nelts = (arrayend - array)/4
